// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SimMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "SimMessage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

SimMessage::SimMessage()
{
	m_tastid = "";	//任务代码
	m_src = "";	    //信源
	m_dest = "";	//信宿
	m_time = "";	//时间戳
	m_step = "";	//步长
	m_type = "";	//指令类型
	m_subtype = "";	//子类型
	m_count = 0;	//计数
}

SimMessage::~SimMessage()
{


}

SimMessage::SimMessage(const SimMessage &x)
{
	m_tastid = x.m_tastid;		//任务代码
	m_src = x.m_src;			//信源
	m_dest = x.m_dest;			//信宿
	m_time = x.m_time;			//时间戳
	m_step = x.m_step;			//步长
	m_type = x.m_type;			//指令类型
	m_subtype = x.m_subtype;	//子类型
	m_count = x.m_count;		//计数
	m_data = x.m_data;			//数据
}

SimMessage::SimMessage(SimMessage &&x)
{
	m_tastid = std::move(x.m_tastid);
	m_src = std::move(x.m_src);
	m_dest = std::move(x.m_dest);
	m_time = std::move(x.m_time);
	m_step = std::move(x.m_step);
	m_type = std::move(x.m_type);
	m_subtype = std::move(x.m_subtype);
	m_count = x.m_count;
	m_data = std::move(x.m_data);
}

SimMessage& SimMessage::operator=(const SimMessage &x)
{
	m_tastid = x.m_tastid;
	m_src = x.m_src;
	m_dest = x.m_dest;
	m_time = x.m_time;
	m_step = x.m_step;
	m_type = x.m_type;
	m_subtype = x.m_subtype;
	m_count = x.m_count;
	m_data = x.m_data;
    return *this;
}

SimMessage& SimMessage::operator=(SimMessage &&x)
{
	m_tastid = std::move(x.m_tastid);
	m_src = std::move(x.m_src);
	m_dest = std::move(x.m_dest);
	m_time = std::move(x.m_time);
	m_step = std::move(x.m_step);
	m_type = std::move(x.m_type);
	m_subtype = std::move(x.m_subtype);
	m_count = x.m_count;
	m_data = std::move(x.m_data);
    return *this;
}

size_t SimMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

	current_alignment += eprosima::fastcdr::Cdr::alignment(current_alignment, 1) + ((1024 * 1024/* * 15*/) * 1);

    return current_alignment - initial_alignment;
}

size_t SimMessage::getCdrSerializedSize(const SimMessage& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.tastID().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.src().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.dest().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.time().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.step().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.subtype().size() + 1;

	current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

	current_alignment +=  eprosima::fastcdr::Cdr::alignment(current_alignment, 1) + data.data().size() + 1;

    return current_alignment - initial_alignment;
}

void SimMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_tastid;
	scdr << m_src;
    scdr << m_dest;
	scdr << m_time;
	scdr << m_step;
	scdr << m_type;
	scdr << m_subtype;
	scdr << m_count;
	scdr << m_data;
}

void SimMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_tastid;
	dcdr >> m_src;
    dcdr >> m_dest;
	dcdr >> m_time;
	dcdr >> m_step;
	dcdr >> m_type;
	dcdr >> m_subtype;
	dcdr >> m_count;
	dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member count
 * @param _index New value for member count
 */
void SimMessage::count(uint32_t _count)
{
	m_count = _count;
}

/*!
 * @brief This function returns the value of member count
 * @return Value of member count
 */
uint32_t SimMessage::count() const
{
    return m_count;
}

/*!
 * @brief This function returns a reference to member count
 * @return Reference to member count
 */
uint32_t& SimMessage::count()
{
    return m_count;
}

/*!
 * @brief This function copies the value in member tastid
 * @param _message New value to be copied in member tastid
 */
void SimMessage::tastID(const std::string &_tastid)
{
	m_tastid = _tastid;
}

/*!
 * @brief This function moves the value in member tastid
 * @param _message New value to be moved in member tastid
 */
void SimMessage::tastID(std::string &&_tastid)
{
	m_tastid = std::move(_tastid);
}

/*!
 * @brief This function returns a constant reference to member tastid
 * @return Constant reference to member tastid
 */
const std::string& SimMessage::tastID() const
{
	return m_tastid;
}

/*!
 * @brief This function returns a reference to member tastid
 * @return Reference to member tastid
 */
std::string& SimMessage::tastID()
{
	return m_tastid;
}

/*!
* @brief This function copies the value in member src
* @param _message New value to be copied in member src
*/
void SimMessage::src(const std::string &_src)
{
	m_src = _src;
}

/*!
* @brief This function moves the value in member src
* @param _message New value to be moved in member src
*/
void SimMessage::src(std::string &&_src)
{
	m_src = std::move(_src);
}

/*!
* @brief This function returns a constant reference to member src
* @return Constant reference to member src
*/
const std::string& SimMessage::src() const
{
	return m_src;
}

/*!
* @brief This function returns a reference to member src
* @return Reference to member src
*/
std::string& SimMessage::src()
{
	return m_src;
}
/*!
* @brief This function copies the value in member dest
* @param _message New value to be copied in member dest
*/
void SimMessage::dest(const std::string &_dest)
{
	m_dest = _dest;
}

/*!
* @brief This function moves the value in member dest
* @param _message New value to be moved in member dest
*/
void SimMessage::dest(std::string &&_dest)
{
	m_dest = std::move(_dest);
}

/*!
* @brief This function returns a constant reference to member dest
* @return Constant reference to member dest
*/
const std::string& SimMessage::dest() const
{
	return m_dest;
}

/*!
* @brief This function returns a reference to member dest
* @return Reference to member dest
*/
std::string& SimMessage::dest()
{
	return m_dest;
}

/*!
* @brief This function copies the value in member time
* @param _message New value to be copied in member time
*/
void SimMessage::time(const std::string &_time)
{
	m_time = _time;
}

/*!
* @brief This function moves the value in member dest
* @param _message New value to be moved in member dest
*/
void SimMessage::time(std::string &&_time)
{
	m_time = std::move(_time);
}

/*!
* @brief This function returns a constant reference to member time
* @return Constant reference to member time
*/
const std::string& SimMessage::time() const
{
	return m_time;
}

/*!
* @brief This function returns a reference to member time
* @return Reference to member time
*/
std::string& SimMessage::time()
{
	return m_time;
}

/*!
* @brief This function copies the value in member step
* @param _message New value to be copied in member step
*/
void SimMessage::step(const std::string& _step)
{
	m_step = _step;
}

/*!
* @brief This function moves the value in member step
* @param _message New value to be moved in member step
*/
void SimMessage::step(std::string&& _step)
{
	m_step = std::move(_step);
}

/*!
* @brief This function returns a constant reference to member step
* @return Constant reference to member step
*/
const std::string& SimMessage::step() const
{
	return m_step;
}

/*!
* @brief This function returns a reference to member step
* @return Reference to member step
*/
std::string& SimMessage::step()
{
	return m_step;
}

/*!
* @brief This function copies the value in member type
* @param _message New value to be copied in member type
*/
void SimMessage::type(const std::string &_type)
{
	m_type = _type;
}

/*!
* @brief This function moves the value in member type
* @param _message New value to be moved in member type
*/
void SimMessage::type(std::string &&_type)
{
	m_type = std::move(_type);
}

/*!
* @brief This function returns a constant reference to member type
* @return Constant reference to member type
*/
const std::string& SimMessage::type() const
{
	return m_type;
}

/*!
* @brief This function returns a reference to member type
* @return Reference to member type
*/
std::string& SimMessage::type()
{
	return m_type;
}

/*!
* @brief This function copies the value in member subtype
* @param _message New value to be copied in member subtype
*/
void SimMessage::subtype(const std::string &_subtype)
{
	m_subtype = _subtype;
}

/*!
* @brief This function moves the value in member subtype
* @param _message New value to be moved in member subtype
*/
void SimMessage::subtype(std::string &&_subtype)
{
	m_subtype = std::move(_subtype);
}

/*!
* @brief This function returns a constant reference to member subtype
* @return Constant reference to member subtype
*/
const std::string& SimMessage::subtype() const
{
	return m_subtype;
}

/*!
* @brief This function returns a reference to member subtype
* @return Reference to member subtype
*/
std::string& SimMessage::subtype()
{
	return m_subtype;
}

/*!
* @brief This function copies the value in member data
* @param _message New value to be copied in member data
*/
void SimMessage::data(const std::vector<uint8_t> &_data)
{
	m_data = _data;
}

/*!
* @brief This function moves the value in member data
* @param _message New value to be moved in member data
*/
void SimMessage::data(std::vector<uint8_t> &&_data)
{
	m_data = std::move(_data);
}

/*!
* @brief This function returns a constant reference to member data
* @return Constant reference to member data
*/
const std::vector<uint8_t>& SimMessage::data() const
{
	return m_data;
}

/*!
* @brief This function returns a reference to member data
* @return Reference to member data
*/
std::vector<uint8_t>& SimMessage::data()
{
	return m_data;
}

size_t SimMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
    return current_align;
}

bool SimMessage::isKeyDefined()
{
   return false;
}

void SimMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}
