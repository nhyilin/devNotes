// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SimMessage.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef SimMessage_h__
#define SimMessage_h__

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SimMessage_SOURCE)
#define SimMessage_DllAPI __declspec( dllexport )
#else
#define SimMessage_DllAPI __declspec( dllimport )
#endif // SimMessage_SOURCE
#else
#define SimMessage_DllAPI
#endif
#else
#define SimMessage_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure SimMessage defined by the user in the IDL file.
 * @ingroup SimMessage
 */
class SimMessage
{
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimMessage();
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimMessage();
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimMessage that will be copied.
     */
    eProsima_user_DllExport SimMessage(const SimMessage &x);
    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimMessage that will be copied.
     */
    eProsima_user_DllExport SimMessage(SimMessage &&x);
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimMessage that will be copied.
     */
    eProsima_user_DllExport SimMessage& operator=(const SimMessage &x);
    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimMessage that will be copied.
     */
    eProsima_user_DllExport SimMessage& operator=(SimMessage &&x);
    /*!
     * @brief This function sets a value in member count
     * @param _index New value for member count
     */
    eProsima_user_DllExport void count(uint32_t _count);
    /*!
     * @brief This function returns the value of member count
     * @return Value of member count
     */
    eProsima_user_DllExport uint32_t count() const;
    /*!
     * @brief This function returns a reference to member count
     * @return Reference to member count
     */
    eProsima_user_DllExport uint32_t& count();
    /*!
     * @brief This function copies the value in member tastID
     * @param _message New value to be copied in member tastID
     */
    eProsima_user_DllExport void tastID(const std::string &_tastid);
    /*!
     * @brief This function moves the value in member tastID
     * @param _message New value to be moved in member tastID
     */
    eProsima_user_DllExport void tastID(std::string &&_tastid);
    /*!
     * @brief This function returns a constant reference to member tastID
     * @return Constant reference to member tastID
     */
    eProsima_user_DllExport const std::string& tastID() const;
    /*!
     * @brief This function returns a reference to member tastID
     * @return Reference to member tastID
     */
    eProsima_user_DllExport std::string& tastID();
	/*!
	* @brief This function copies the value in member src
	* @param _message New value to be copied in member src
	*/
	eProsima_user_DllExport void src(const std::string &_src);
	/*!
	* @brief This function moves the value in member src
	* @param _message New value to be moved in member src
	*/
	eProsima_user_DllExport void src(std::string &&_src);
	/*!
	* @brief This function returns a constant reference to member src
	* @return Constant reference to member src
	*/
	eProsima_user_DllExport const std::string& src() const;
	/*!
	* @brief This function returns a reference to member src
	* @return Reference to member src
	*/
	eProsima_user_DllExport std::string& src();
	/*!
	* @brief This function copies the value in member dest
	* @param _message New value to be copied in member dest
	*/
	eProsima_user_DllExport void dest(const std::string &_dest);
	/*!
	* @brief This function moves the value in member dest
	* @param _message New value to be moved in member dest
	*/
	eProsima_user_DllExport void dest(std::string &&_dest);
	/*!
	* @brief This function returns a constant reference to member dest
	* @return Constant reference to member dest
	*/
	eProsima_user_DllExport const std::string& dest() const;
	/*!
	* @brief This function returns a reference to member dest
	* @return Reference to member dest
	*/
	eProsima_user_DllExport std::string& dest();

	/*!
	* @brief This function copies the value in member time
	* @param _message New value to be copied in member time
	*/
	eProsima_user_DllExport void time(const std::string &_time);
	/*!
	* @brief This function moves the value in member time
	* @param _message New value to be moved in member time
	*/
	eProsima_user_DllExport void time(std::string &&_time);
	/*!
	* @brief This function returns a constant reference to member time
	* @return Constant reference to member time
	*/
	eProsima_user_DllExport const std::string& time() const;
	/*!
	* @brief This function returns a reference to member time
	* @return Reference to member time
	*/
	eProsima_user_DllExport std::string& time();

	/*!
	* @brief This function copies the value in member step
	* @param _message New value to be copied in member step
	*/
	eProsima_user_DllExport void step(const std::string& _step);
	/*!
	* @brief This function moves the value in member step
	* @param _message New value to be moved in member step
	*/
	eProsima_user_DllExport void step(std::string&& _step);
	/*!
	* @brief This function returns a constant reference to member step
	* @return Constant reference to member step
	*/
	eProsima_user_DllExport const std::string& step() const;
	/*!
	* @brief This function returns a reference to member step
	* @return Reference to member time
	*/
	eProsima_user_DllExport std::string& step();
	/*!
	* @brief This function copies the value in member type
	* @param _message New value to be copied in member type
	*/
	eProsima_user_DllExport void type(const std::string &_type);
	/*!
	* @brief This function moves the value in member type
	* @param _message New value to be moved in member type
	*/
	eProsima_user_DllExport void type(std::string &&_type);
	/*!
	* @brief This function returns a constant reference to member type
	* @return Constant reference to member type
	*/
	eProsima_user_DllExport const std::string& type() const;
	/*!
	* @brief This function returns a reference to member type
	* @return Reference to member type
	*/
	eProsima_user_DllExport std::string& type();

	/*!
	* @brief This function copies the value in member subtype
	* @param _message New value to be copied in member subtype
	*/
	eProsima_user_DllExport void subtype(const std::string &_subtype);
	/*!
	* @brief This function moves the value in member subtype
	* @param _message New value to be moved in member subtype
	*/
	eProsima_user_DllExport void subtype(std::string &&_subtype);
	/*!
	* @brief This function returns a constant reference to member subtype
	* @return Constant reference to member subtype
	*/
	eProsima_user_DllExport const std::string& subtype() const;
	/*!
	* @brief This function returns a reference to member subtype
	* @return Reference to member subtype
	*/
	eProsima_user_DllExport std::string& subtype();

	/*!
	* @brief This function copies the value in member data
	* @param _message New value to be copied in member data
	*/
	eProsima_user_DllExport void data(const std::vector<uint8_t> &_data);

	/*!
	* @brief This function moves the value in member data
	* @param _message New value to be moved in member data
	*/
	eProsima_user_DllExport void data(std::vector<uint8_t> &&_data);

	/*!
	* @brief This function returns a constant reference to member data
	* @return Constant reference to member data
	*/
	eProsima_user_DllExport const std::vector<uint8_t>& data() const;

	/*!
	* @brief This function returns a reference to member data
	* @return Reference to member data
	*/
	eProsima_user_DllExport std::vector<uint8_t>& data();
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const SimMessage& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
	std::string	m_tastid;		//任务代码
	std::string m_src;			//信源
	std::string m_dest;			//信宿
	std::string m_time;			//时间戳
	std::string m_step;		    //步长
	std::string m_type;			//指令类型
	std::string m_subtype;		//子类型
	uint32_t	m_count;		//计数
	std::vector<uint8_t> m_data;
};

#endif // SimMessage_h__